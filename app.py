from flask import Flask, jsonify
from flask_cors import CORS
import yfinance as yf
import os 

app = Flask(__name__)

CORS(app, resources={r"/api/*": {"origins": ["http://localhost:3000", "https://stockdata-k09z.onrender.com"]}})


tickers = [
    "AAK.ST",
    "ABB.ST",
    "ACAD.ST",
    "ALIF-B.ST",
    "ANOD-B.ST",
    "ADDT-B.ST",
    "AFRY.ST",
    "ALFA.ST",
    "ALIG.ST",
    "ALLEI.ST",
    "ALLIGO-B.ST",
    "ALVO-SDB.ST",
    "AMBEA.ST",
    "APOTEA.ST",
    "AQ.ST",
    "ARP.ST",
    "ARION-SDB.ST",
    "ARISE.ST",
    "ARJO-B.ST",
    "ASKER.ST",
    "ASMDEE-B.ST",
    "ASSA-B.ST",
    "AZN.ST",
    "ATCO-A.ST",
    "ATCO-B.ST",
    "ATRLJ-B.ST",
    "ATT.ST",
    "ALIV-SDB.ST",
    "AZA.ST",
    "AXFO.ST",
    "BACTI-B.ST",
    "BEIA-B.ST",
    "BERG-B.ST",
    "BESQAB.ST",
    "BESQAB-PREF-B.ST",
    "BETS-B.ST",
    "BETCO.ST",
    "BHG.ST",
    "BICO.ST",
    "BILI-A.ST",
    "BILL.ST",
    "BIOA-B.ST",
    "BIOG-B.ST",
    "BINV.ST",
    "BOL.ST",
    "BONAV-A.ST",
    "BONAV-B.ST",
    "BONEX.ST",
    "BOOZT.ST",
    "BRAV.ST",
    "BRIN-B.ST",
    "BTS-B.ST",
    "BUFAB.ST",
    "BURE.ST",
    "BMAX.ST",
    "AJA-B.ST",
    "CAMX.ST",
    "CAST.ST",
    "CAT-A.ST",
    "CAT-B.ST",
    "CATE.ST",
    "CAVO.ST",
    "CELLAV.ST",
    "CIBUS.ST",
    "CINN.ST",
    "CINT.ST",
    "CLAS-B.ST",
    "CLOET-B.ST",
    "COIN.ST",
    "COOR.ST",
    "CORE-A.ST",
    "CORE-B.ST",
    "CORE-D.ST",
    "CORE-PREF.ST",
    "CRED-A.ST",
    "CTT.ST",
    "DIOS.ST",
    "DOM.ST",
    "DUNI.ST",
    "DUST.ST",
    "DYNA.ST",
    "EAST.ST",
    "ELAN-B.ST",
    "ELUX-A.ST",
    "ELUX-B.ST",
    "ELUXB.ST",
    "ELUX-PRO-B.ST",
    "ELFA-B.ST",
    "EMBRAC-B.ST",
    "ENEA.ST",
    "ENGCON-B.ST",
    "ENITY.ST",
    "EOLU-B.ST",
    "EPEN.ST",
    "EPI-A.ST",
    "EPI-B.ST",
    "EQT.ST",
    "ERIC-A.ST",
    "ERIC-B.ST",
    "ESSITY-A.ST",
    "ESSITY-B.ST",
    "EVO.ST",
    "EWRK.ST",
    "FABG.ST",
    "FAG.ST",
    "FG.ST",
    "BALD-B.ST",
    "EMIL-PREF.ST",
    "EMIL-B.ST",
    "FPAR-A.ST",
    "FPAR-D.ST",
    "FOI-B.ST",
    "FLERIE.ST",
    "FMM-B.ST",
    "GENO.ST",
    "GENTOO.ST",
    "GETI-B.ST",
    "GREEN.ST",
    "VISC-B.ST",
    "GRANG.ST",
    "Hacksaw.ST",
    "HNSA.ST",
    "HANZA.ST",
    "HEBA-B.ST",
    "HEM.ST",
    "HM-B.ST",
    "HEXA-B.ST",
    "HTRO.ST",
    "HPOL-B.ST",
    "HMS.ST",
    "HOFI.ST",
    "HOLM-A.ST",
    "HOLM-B.ST",
    "HUFV-A.ST",
    "HUM.ST",
    "HUMBLE.ST",
    "HUSQ-A.ST",
    "HUSQ-B.ST",
    "IAR.ST",
    "INDU-A.ST",
    "INDU-C.ST",
    "INDT.ST",
    "INSTAL.ST",
    "INTEA-B.ST",
    "INTEA-D.ST",
    "IPC.ST",
    "INTRUM.ST",
    "INVE-A.ST",
    "INVE-B.ST",
    "INVI.ST",
    "INWI.ST",
    "ITAB.ST",
    "JM.ST",
    "JOMA.ST",
    "KFAST-B.ST",
    "KABE-B.ST",
    "KARN.ST",
    "KINV-A.ST",
    "KINV-B.ST",
    "KBAB-B.ST",
    "KNOW.ST",
    "LAG-B.ST",
    "LAT-B.ST",
    "LIFCO-B.ST",
    "LIME.ST",
    "LINC.ST",
    "LIAB.ST",
    "LOGI-A.ST",
    "LOGI-B.ST",
    "LOOM.ST",
    "LUND-B.ST",
    "LUG.ST",
    "LUM.ST",
    "MCAP.ST",
    "MCOV-B.ST",
    "MEKO.ST",
    "MEREN.ST",
    "MILD.ST",
    "MIPS.ST",
    "MTG-A.ST",
    "MTG-B.ST",
    "MMGR-B.ST",
    "MTRS.ST",
    "MYCR.ST",
    "NCAB.ST",
    "NCC-A.ST",
    "NCC-B.ST",
    "NED-B.ST",
    "NEOBO.ST",
    "NETI-B.ST",
    "NWG-B.ST",
    "NIBE-B.ST",
    "NIVA-B.ST",
    "NOBI.ST",
    "NOLA-B.ST",
    "NDA-SE.ST",
    "NORD-P.ST",
    "NNET.ST",
    "NORION.ST",
    "NOTE.ST",
    "NP3.ST",
    "NP3-PREF.ST",
    "NYFOSA.ST",
    "OEM-B.ST",
    "ORRON.ST",
    "PANDX-B.ST",
    "PEAB-B.ST",
    "PLAT-B.ST",
    "POW.ST",
    "PRIC-B.ST",
    "PRISMA.ST",
    "PACT.ST",
    "PRTO.ST",
    "RATOS-A.ST",
    "RATOS-B.ST",
    "RAY-B.ST",
    "REJL-B.ST",
    "RESURS.ST",
    "ROTT.ST",
    "RUSTA.ST",
    "RVRC.ST",
    "RÖKO-B.ST",
    "SAAB-B.ST",
    "SAGA-A.ST",
    "SAGA-B.ST",
    "SAGA-D.ST",
    "SBB-B.ST",
    "SBB-D.ST",
    "SAMPO.ST",
    "SAND.ST",
    "SCA-A.ST",
    "SCA-B.ST",
    "SCS.ST",
    "SHOT.ST",
    "SDIP-B.ST",
    "SDIP-PREF.ST",
    "SEB-A.ST",
    "SEB-C.ST",
    "SECT-B.ST",
    "SECU-B.ST",
    "SEDANA.ST",
    "SINCH.ST",
    "SKANS-B.ST",
    "SKF-A.ST",
    "SKF-B.ST",
    "SKIS-B.ST",
    "SSAB-A.ST",
    "SSAB-B.ST",
    "STEF-B.ST",
    "SFAST.ST",
    "STILL.ST",
    "STE-A.ST",
    "STE-R.ST",
    "STOR-B.ST",
    "SHB-A.ST",
    "SHB-B.ST",
    "SVEA.ST",
    "SVOL-A.ST",
    "SVOL-B.ST",
    "SWEC-A.ST",
    "SWEC-B.ST",
    "SWED-A.ST",
    "SLP-B.ST",
    "SOBI.ST",
    "SYNSAM.ST",
    "SYSR.ST",
    "TEL2-A.ST",
    "TEL2-B.ST",
    "TELIA.ST",
    "TFBANK.ST",
    "THULE.ST",
    "TIETO.ST",
    "TRAC-B.ST",
    "TRATON.ST",
    "TREL-B.ST",
    "TRIAN-B.ST",
    "TROAX.ST",
    "TRUE-B.ST",
    "VBG-B.ST",
    "VEF.ST",
    "VESTUM.ST",
    "VPLAY-A.ST",
    "VPLAY-B.ST",
    "VIMIAN.ST",
    "VITEC-B.ST",
    "VITR.ST",
    "VNV.ST",
    "VOLO.ST",
    "VOLO-PREF.ST",
    "VOLV-A.ST",
    "VOLV-B.ST",
    "VOLCAR-B.ST",
    "WALL-B.ST",
    "WIHL.ST",
    "XANO-B.ST",
    "XVIVO.ST",
    "YUBICO.ST",
    "ORES.ST"
]
@app.route('/api/stocks/names', methods=['GET'])
def get_all_stock_names():
    """Returnerar en lista med alla tickers som har ett longName."""
    results = []
    for ticker in tickers:
        try:
            stock = yf.Ticker(ticker)
            info = stock.info
            if info.get("longName"):
                results.append({"ticker": ticker, "name": info["longName"]})
        except Exception:
            continue
    return jsonify(results)


@app.route('/api/stocks/details/<ticker>', methods=['GET'])
def get_stock_details(ticker):
    try:
        stock = yf.Ticker(ticker)
        info = stock.info
        
        hist_data = stock.history(period="1d", interval="5m")

        if not hist_data.empty:
            price_history = hist_data['Close'].dropna().tolist()
        else:
            price_history = []

        price = info.get("regularMarketPrice")
        name = info.get("longName")
        change_raw = info.get("regularMarketChange")

        if change_raw is not None:
            change = round(float(change_raw), 2)
        else:
            change = None

        currency = info.get("currency")

        return jsonify({
            "ticker": ticker,
            "name": name,
            "change": change,
            "price": round(float(price), 2) if price is not None else None,
            "currency": currency,
            "metrics": {
                "market_cap": info.get("marketCap"),
                "enterprise_value": info.get("enterpriseValue"),
                "trailing_pe": info.get("trailingPE"),
                "forward_pe": info.get("forwardPE"),
                "peg_ratio": info.get("pegRatio"),
                "ps_ratio": info.get("priceToSalesTrailing12Months"),
                "pb_ratio": info.get("priceToBook"),
                "ev_revenue": info.get("enterpriseToRevenue"),
                "ev_ebitda": info.get("enterpriseToEbitda")
            },
            "priceHistory": price_history
        })
    except Exception as e:
        return jsonify({"error": str(e)}), 500


if __name__ == '__main__':
    # Get the port from the environment, defaulting to 5000
    port = int(os.environ.get("PORT", 5000))
    # Run the app, binding to 0.0.0.0 to accept external requests
    app.run(host='0.0.0.0', port=port, debug=True)








# const stockholmLargeMidCap = [
#   "AAK.ST",
#   "ABB.ST",
#   "ACAD.ST",
#   "ALIF-B.ST",
#   "ANOD-B.ST",
#   "ADDT-B.ST",
#   "AFRY.ST",
#   "ALFA.ST",
#   "ALIG.ST"
#   "ALLEI.ST",
#   "ALLIGO-B.ST",
#   "ALVO-SDB.ST",
#   "AMBEA.ST",
#   "APOTEA.ST",
#   "AQ.ST",
#   "ARP.ST"
#   "ARION-SDB.ST",
#   "ARISE.ST",
#   "ARJO-B.ST",
#   "ASKER.ST",
#   "ASMDEE-B.ST",
#   "ASSA-B.ST",
#   "AZN.ST",
 #  ATCO-A.ST
#   ATCO-B.ST",
#   "ATRLJ-B.ST",
#   "ATT.ST",
#   "ALIV-SDB.ST",
#   "AZA.ST",
#   "AXFO.ST",
#   "BACTI-B.ST",
#   "BEIA-B.ST",
#   "BEIJ-B.ST",
#   "BERG-B.ST",
#   "BESQAB.ST",
#   "BESQAB-PREF-B.ST",
#   "BETS-B.ST",
#   "BETCO.ST",
#   "BHG.ST",
#   "BICO.ST",
#   "BILI-A.ST",
#   "BILL.ST",
#   "BIOA-B.ST",
#   "BIOG-B.ST",
#   "BINV.ST",
#   "BOL.ST",
#   "BONAV-A.ST",
#   "BONAV-B.ST",
#   "BONEX.ST",
#   "BOOZT.ST",
#   "BRAV.ST",
#   "BRIN-B.ST",
#   "BTS-B.ST",
#   "BUFAB.ST",




#   "Bure Equity",
#   "Byggmax Group",
#   "Byggmästare A J Ahlström H",
#   "Camurus",
#   "Castellum",
#   "Catella A",
#   "Catella B",



#   "Catena",
#   "Cavotec Group",
#   "CellaVision",
#   "Cibus Nordic Real Estate",
#   "Cinclus Pharma Holding",
#   "Cint Group",
#   "Clas Ohlson B",
#   "Cloetta B",
#   "CoinShares International",
#   "Coor Service Management Hold",
#   "Corem Property Group A",
#   "Corem Property Group B",
#   "Corem Property Group D",
#   "Corem Property Group Pref",
#   "Creades A",
#   "CTT Systems",
#   "Diös Fastigheter",
#   "Dometic Group",
#   "Duni",
#   "Dustin Group",
#   "Dynavox Group",
#   "Eastnine",
#   "Elanders B",
#   "Electrolux A",
#   "Electrolux B",
#   "Electrolux Professional B",
#   "Elekta B",
#   "Embracer Group B",
#   "Enea",
#   "engcon B",
#   "Enity Holding",
#   "Eolus B",
#   "Ependion",
#   "Epiroc A",
#   "Epiroc B",
#   "EQT",
#   "Ericsson A",
#   "Ericsson B",
#   "Essity A",
#   "Essity B",
#   "Evolution",
#   "Ework Group",
#   "Fabege",
#   "Fagerhult Group",
#   "Fasadgruppen Group",
#   "Fast. Balder B",
#   "Fastighetsbolag. Emilshus Pref",
#   "Fastighetsbolaget Emilshus B",
#   "Fastpartner A",
#   "Fastpartner D",
#   "Fenix Outdoor International B",
#   "Flerie",
#   "FM Mattsson B",
#   "Genova Property Group",
#   "Gentoo Media",
#   "Getinge B",
#   "Green Landscaping Group",
#   "Gruvaktiebolaget Viscaria",
#   "Gränges",
#   "Hacksaw",
#   "Hansa Biopharma",
#   "HANZA",
#   "HEBA B",
#   "Hemnet Group",
#   "Hennes & Mauritz B",
#   "Hexagon B",
#   "Hexatronic Group",
#   "HEXPOL B",
#   "HMS Networks",
#   "Hoist Finance",
#   "Holmen A",
#   "Holmen B",
#   "Hufvudstaden A",
#   "Humana",
#   "Humble Group",
#   "Husqvarna A",
#   "Husqvarna B",
#   "I.A.R Systems Group",
#   "Industrivärden A",
#   "Industrivärden C",
#   "Indutrade",
#   "Instalco",
#   "Intea Fastigheter B",
#   "Intea Fastigheter D",
#   "International Petroleum Corp",
#   "Intrum",
#   "Investor A",
#   "Investor B",
#   "INVISIO",
#   "Inwido",
#   "ITAB Shop Concept",
#   "JM",
#   "John Mattson Fastighetsföret",
#   "K-Fast Holding B",
#   "KABE Group B",
#   "Karnov Group",
#   "Kinnevik A",
#   "Kinnevik B",
#   "KlaraBo Sverige B",
#   "Knowit",
#   "Lagercrantz Group B",
#   "Latour B",
#   "Lifco B",
#   "Lime Technologies",
#   "Linc",
#   "Lindab International",
#   "Logistea A",
#   "Logistea B",
#   "Loomis",
#   "Lundbergföretagen B",
#   "Lundin Gold",
#   "Lundin Mining Corporation",
#   "MedCap",
#   "Medicover B",
#   "MEKO",
#   "Meren Energy",
#   "Mildef Group",
#   "Mips",
#   "Modern Times Group A",
#   "Modern Times Group B",
#   "Momentum Group B",
#   "Munters Group",
#   "Mycronic",
#   "NCAB Group",
#   "NCC A",
#   "NCC B",
#   "Nederman Holding",
#   "Neobo Fastigheter",
#   "Net Insight B",
#   "New Wave B",
#   "NIBE Industrier B",
#   "Nivika Fastigheter B",
#   "Nobia",
#   "Nolato B",
#   "Nordea Bank Abp",
#   "Nordic Paper Holding",
#   "Nordnet",
#   "Norion Bank",
#   "NOTE",
#   "NP3 Fastigheter",
#   "NP3 Fastigheter Pref",
#   "Nyfosa",
#   "OEM International B",
#   "Orrön Energy",
#   "Pandox B",
#   "Peab B",
#   "Platzer Fastigheter Holding B",
#   "PowerCell Sweden",
#   "Pricer B",
#   "Prisma Properties",
#   "Proact IT Group",
#   "Profoto Holding",
#   "Ratos A",
#   "Ratos B",
#   "RaySearch Laboratories B",
#   "Rejlers B",
#   "Resurs Holding",
#   "Rottneros",
#   "Rusta",
#   "RVRC Holding",
#   "Röko B",
#   "SAAB B",
#   "Sagax A",
#   "Sagax B",
#   "Sagax D",
#   "Samhällsbyggnadsbo. i Norden B",
#   "Samhällsbyggnadsbo. i Norden D",
#   "Sampo Oyj SDB",
#   "Sandvik",
#   "SCA A",
#   "SCA B",
#   "Scandi Standard",
#   "Scandic Hotels Group",
#   "Sdiptech B",
#   "Sdiptech Pref",
#   "SEB A",
#   "SEB C",
#   "SECTRA B",
#   "Securitas B",
#   "Sedana Medical",
#   "Sinch",
#   "Skanska B",
#   "SKF A",
#   "SKF B",
#   "SkiStar B",
#   "SSAB A",
#   "SSAB B",
#   "Stendörren Fastigheter B",
#   "Stenhus Fastigheter i Norden",
#   "Stillfront Group",
#   "Stora Enso A",
#   "Stora Enso R",
#   "Storskogen Group B",
#   "Sv. Handelsbanken A",
#   "Sv. Handelsbanken B",
#   "Sveafastigheter",
#   "Svolder A",
#   "Svolder B",
#   "SWECO A",
#   "SWECO B",
#   "Swedbank A",
#   "Swedish Logistic Property B",
#   "Swedish Orphan Biovitrum",
#   "Synsam",
#   "Systemair",
#   "Tele2 A",
#   "Tele2 B",
#   "Telia Company",
#   "TF Bank",
#   "Thule Group",
#   "TietoEVRY Oyj",
#   "Traction B",
#   "TRATON",
#   "Trelleborg B",
#   "Trianon B",
#   "Troax Group",
#   "Truecaller B",
#   "VBG GROUP B",
#   "VEF",
#   "Vestum",
#   "Viaplay Group A",
#   "Viaplay Group B",
#   "Vimian Group",
#   "Vitec Software Group B",
#   "Vitrolife",
#   "VNV Global",
#   "Volati",
#   "Volati Pref",
#   "Volvo A",
#   "Volvo B",
#   "Volvo Car B",
#   "Wallenstam B",
#   "Wihlborgs Fastigheter",
#   "XANO Industri B",
#   "Xvivo Perfusion",
#   "Yubico",
#   "Öresund"
# ];























													